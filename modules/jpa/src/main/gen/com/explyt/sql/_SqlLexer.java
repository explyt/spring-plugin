// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _SqlLexer.flex

package com.explyt.sql;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.explyt.sql.psi.SqlTypes.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;


public class _SqlLexer implements FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };

    /**
     * Top-level table for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

    private static final String ZZ_CMAP_TOP_PACKED_0 =
            "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\1\u0500\16\u0200" +
                    "\1\u0600\u10cf\u0200";

    private static int[] zzUnpackcmap_top() {
        int[] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

    private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
            "\11\0\5\1\22\0\1\1\6\0\1\2\1\3\1\4" +
                    "\1\5\1\6\1\7\1\10\1\11\1\12\12\13\1\14" +
                    "\1\15\1\16\1\17\1\20\1\21\1\0\1\22\1\23" +
                    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33" +
                    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43" +
                    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53" +
                    "\4\0\1\54\1\0\1\22\1\23\1\24\1\55\1\26" +
                    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36" +
                    "\1\37\1\40\1\41\1\42\1\43\1\44\1\56\1\46" +
                    "\1\47\1\50\1\51\1\52\1\53\1\57\1\0\1\60" +
                    "\7\0\1\61\32\0\1\61\217\0\2\62\115\0\1\63" +
                    "\u0200\0\1\61\177\0\13\61\35\0\2\61\5\0\1\61" +
                    "\57\0\1\61\312\0\1\64\325\0\1\61\377\0";

    private static int[] zzUnpackcmap_blocks() {
        int[] result = new int[1792];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6" +
                    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16" +
                    "\1\17\1\20\1\21\25\22\1\1\1\23\3\1\1\0" +
                    "\1\24\1\0\1\21\1\25\1\26\1\27\1\30\3\22" +
                    "\1\31\1\22\1\31\2\22\1\32\6\22\1\0\5\22" +
                    "\1\0\5\22\1\33\2\34\5\22\1\0\4\22\1\0" +
                    "\3\22\1\35\1\36\1\37\6\22\1\0\4\22\1\0" +
                    "\3\22\2\0\1\33\5\0\2\40\1\41\1\42\1\43" +
                    "\1\44\1\45\1\44\3\22\1\0\7\22\1\0\1\22" +
                    "\1\0\1\22\1\0\1\22\1\46\3\22\2\0\11\22" +
                    "\1\0\1\22\1\0\1\47\5\22\1\0\2\22\1\0" +
                    "\1\50\1\22\1\51\1\52\1\51\1\53\6\22\1\54" +
                    "\4\22\1\55\1\0\5\22\1\0\1\22\1\0\4\22" +
                    "\6\0\1\54\3\0\1\55\1\47\1\22\1\56\2\57" +
                    "\4\22\1\60\1\22\2\61\1\22\1\0\2\62\4\22" +
                    "\3\0\1\63\3\22\1\0\4\22\1\64\1\0\2\65" +
                    "\1\22\1\66\1\22\1\67\1\22\1\0\1\67\3\22" +
                    "\1\70\2\22\1\0\3\22\1\71\1\72\1\73\1\22" +
                    "\1\0\1\71\1\74\1\75\1\22\1\0\1\76\1\77" +
                    "\1\76\1\100\1\75\3\22\1\101\1\22\4\0\1\64" +
                    "\1\0\1\72\1\73\3\22\1\102\3\22\1\0\1\103" +
                    "\1\104\2\22\2\0\1\77\1\22\1\105\1\22\1\0" +
                    "\1\106\1\107\2\22\1\0\1\22\1\0\1\22\2\110" +
                    "\1\22\1\111\2\22\1\0\2\22\1\0\1\112\1\113" +
                    "\2\22\1\0\1\22\1\0\1\22\1\0\1\22\1\114" +
                    "\1\115\1\116\1\0\1\106\1\107\2\0\2\22\1\0" +
                    "\1\117\1\22\1\120\1\22\1\0\1\121\2\122\1\121" +
                    "\1\22\1\0\2\123\1\124\1\22\1\124\1\22\1\0" +
                    "\1\125\1\126\1\127\2\130\1\131\2\132\1\133\1\22" +
                    "\1\0\1\22\1\0\1\22\1\0\1\134\2\135\1\0" +
                    "\1\136\1\0\1\133\1\137\1\22\1\0\2\22\1\0" +
                    "\1\22\1\0\1\140\2\141\1\22\1\0\1\22\1\0" +
                    "\1\22\1\0\1\140\2\142\1\22\2\143\2\144\1\22" +
                    "\1\0\1\22\1\0\2\145\2\22\2\146\2\147\2\22" +
                    "\1\0\2\22\1\0\1\150\2\151\1\22\1\0\1\22" +
                    "\1\0\1\22\1\0\1\22\1\0\2\152";

    private static int[] zzUnpackAction() {
        int[] result = new int[454];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\65\0\152\0\237\0\65\0\65\0\65\0\65" +
                    "\0\65\0\65\0\65\0\65\0\324\0\u0109\0\65\0\u013e" +
                    "\0\65\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1" +
                    "\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459" +
                    "\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601" +
                    "\0\u0636\0\65\0\u066b\0\u06a0\0\u06d5\0\237\0\u070a\0\u073f" +
                    "\0\u0774\0\65\0\65\0\65\0\u01a8\0\u07a9\0\u07de\0\u0813" +
                    "\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u04f8\0\u0951\0\u0986" +
                    "\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e" +
                    "\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6" +
                    "\0\u0d0b\0\u04f8\0\65\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14" +
                    "\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc" +
                    "\0\u0ff1\0\u1026\0\u04f8\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f" +
                    "\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7" +
                    "\0\u130c\0\u1341\0\u1376\0\u0636\0\u13ab\0\u13e0\0\u1415\0\u144a" +
                    "\0\u147f\0\u14b4\0\u14e9\0\u04f8\0\65\0\u04f8\0\u04f8\0\u04f8" +
                    "\0\u04f8\0\u04f8\0\65\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2" +
                    "\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a" +
                    "\0\u17cf\0\u1804\0\u1839\0\u186e\0\u04f8\0\u18a3\0\u18d8\0\u190d" +
                    "\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5" +
                    "\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\u04f8\0\u1c28" +
                    "\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0" +
                    "\0\u04f8\0\u1e05\0\u04f8\0\u04f8\0\65\0\u04f8\0\u1e3a\0\u1e6f" +
                    "\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43\0\u04f8\0\u1f78\0\u1fad\0\u1fe2" +
                    "\0\u2017\0\u04f8\0\u204c\0\u2081\0\u20b6\0\u20eb\0\u2120\0\u2155" +
                    "\0\u218a\0\u21bf\0\u21f4\0\u2229\0\u225e\0\u2293\0\u22c8\0\u22fd" +
                    "\0\u2332\0\u2367\0\u239c\0\u23d1\0\u2406\0\65\0\u243b\0\u2470" +
                    "\0\u24a5\0\65\0\65\0\u24da\0\u04f8\0\u04f8\0\65\0\u250f" +
                    "\0\u2544\0\u2579\0\u25ae\0\u04f8\0\u25e3\0\u04f8\0\65\0\u2618" +
                    "\0\u264d\0\u04f8\0\65\0\u2682\0\u26b7\0\u26ec\0\u2721\0\u2756" +
                    "\0\u278b\0\u27c0\0\u04f8\0\u27f5\0\u282a\0\u285f\0\u2894\0\u28c9" +
                    "\0\u28fe\0\u2933\0\u2968\0\u04f8\0\u299d\0\u04f8\0\65\0\u29d2" +
                    "\0\u04f8\0\u2a07\0\u04f8\0\u2a3c\0\u2a71\0\65\0\u2aa6\0\u2adb" +
                    "\0\u2b10\0\u2b45\0\u2b7a\0\u2baf\0\u2be4\0\u2c19\0\u2c4e\0\u2c83" +
                    "\0\u04f8\0\u04f8\0\u04f8\0\u2cb8\0\u2ced\0\65\0\u04f8\0\u2d22" +
                    "\0\u2d57\0\u2d8c\0\u04f8\0\u04f8\0\65\0\u04f8\0\u2dc1\0\u2df6" +
                    "\0\u2e2b\0\u2e60\0\u04f8\0\u2e95\0\u2eca\0\u2eff\0\u2f34\0\u2f69" +
                    "\0\65\0\u2f9e\0\65\0\65\0\u2fd3\0\u3008\0\u303d\0\u04f8" +
                    "\0\u3072\0\u30a7\0\u30dc\0\u3111\0\u04f8\0\u04f8\0\u3146\0\u317b" +
                    "\0\u31b0\0\u31e5\0\65\0\u321a\0\u04f8\0\u324f\0\u3284\0\u04f8" +
                    "\0\u04f8\0\u32b9\0\u32ee\0\u3323\0\u3358\0\u338d\0\u33c2\0\u04f8" +
                    "\0\65\0\u33f7\0\u04f8\0\u342c\0\u3461\0\u3496\0\u34cb\0\u3500" +
                    "\0\u3535\0\u04f8\0\u04f8\0\u356a\0\u359f\0\u35d4\0\u3609\0\u363e" +
                    "\0\u3673\0\u36a8\0\u36dd\0\u04f8\0\u3712\0\u04f8\0\u3747\0\65" +
                    "\0\65\0\u377c\0\u37b1\0\u37e6\0\u381b\0\u3850\0\u04f8\0\u3885" +
                    "\0\u04f8\0\u38ba\0\u38ef\0\u04f8\0\u04f8\0\65\0\65\0\u3924" +
                    "\0\u3959\0\u04f8\0\65\0\u04f8\0\u398e\0\65\0\u39c3\0\u39f8" +
                    "\0\u04f8\0\u04f8\0\u04f8\0\u04f8\0\65\0\u04f8\0\u04f8\0\65" +
                    "\0\u04f8\0\u3a2d\0\u3a62\0\u3a97\0\u3acc\0\u3b01\0\u3b36\0\u04f8" +
                    "\0\u04f8\0\65\0\u3b6b\0\65\0\u3ba0\0\65\0\u04f8\0\u3bd5" +
                    "\0\u3c0a\0\u3c3f\0\u3c74\0\u3ca9\0\u3cde\0\u3d13\0\u04f8\0\u04f8" +
                    "\0\65\0\u3d48\0\u3d7d\0\u3db2\0\u3de7\0\u3e1c\0\u3e51\0\65" +
                    "\0\u04f8\0\65\0\u3e86\0\u04f8\0\65\0\u04f8\0\65\0\u3ebb" +
                    "\0\u3ef0\0\u3f25\0\u3f5a\0\u04f8\0\65\0\u3f8f\0\u3fc4\0\u04f8" +
                    "\0\65\0\u04f8\0\65\0\u3ff9\0\u402e\0\u4063\0\u4098\0\u40cd" +
                    "\0\u4102\0\u04f8\0\u4137\0\u416c\0\u41a1\0\u41d6\0\u420b\0\u4240" +
                    "\0\u4275\0\u42aa\0\u42df\0\u4314\0\u04f8\0\65";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[454];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length() - 1;
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpacktrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11" +
                    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21" +
                    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31" +
                    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41" +
                    "\1\42\3\43\1\44\1\45\1\46\1\47\1\50\4\43" +
                    "\1\27\1\45\1\51\1\52\1\3\1\53\1\54\1\55" +
                    "\66\0\1\3\57\0\1\3\3\0\2\56\1\57\62\56" +
                    "\11\0\1\60\1\0\1\15\73\0\35\61\25\0\1\62" +
                    "\1\63\63\0\1\64\60\0\1\65\64\0\1\43\6\0" +
                    "\1\43\1\66\11\43\1\67\1\43\1\70\4\43\1\71" +
                    "\2\43\1\72\7\43\4\0\1\73\14\0\1\43\6\0" +
                    "\4\43\1\74\11\43\1\75\11\43\1\76\4\43\21\0" +
                    "\1\43\6\0\1\77\15\43\1\100\5\43\1\101\10\43" +
                    "\21\0\1\43\6\0\1\102\3\43\1\103\3\43\1\104" +
                    "\24\43\3\0\1\105\15\0\1\43\6\0\13\43\1\106" +
                    "\1\107\1\110\4\43\1\111\4\43\1\112\5\43\4\0" +
                    "\1\113\14\0\1\43\6\0\1\114\20\43\1\115\2\43" +
                    "\1\116\10\43\21\0\1\43\6\0\21\43\1\117\13\43" +
                    "\21\0\1\43\6\0\1\120\34\43\21\0\1\43\6\0" +
                    "\15\43\1\121\4\43\1\122\12\43\4\0\1\123\14\0" +
                    "\1\43\6\0\16\43\1\124\16\43\21\0\1\43\6\0" +
                    "\4\43\1\125\30\43\21\0\1\43\6\0\4\43\1\126" +
                    "\3\43\1\127\5\43\1\130\16\43\3\0\1\131\15\0" +
                    "\1\43\6\0\1\132\3\43\1\133\3\43\1\134\5\43" +
                    "\1\135\16\43\3\0\1\136\15\0\1\43\6\0\16\43" +
                    "\1\137\5\43\1\140\10\43\21\0\1\43\6\0\1\43" +
                    "\1\141\3\43\1\142\7\43\1\143\3\43\1\144\2\43" +
                    "\1\145\10\43\21\0\1\43\6\0\35\43\21\0\1\43" +
                    "\6\0\4\43\1\146\3\43\1\147\5\43\1\150\1\43" +
                    "\1\151\3\43\1\152\10\43\3\0\1\153\15\0\1\43" +
                    "\6\0\7\43\1\154\1\155\10\43\1\156\6\43\1\157" +
                    "\4\43\3\0\1\160\15\0\1\43\6\0\17\43\1\161" +
                    "\15\43\21\0\1\43\6\0\1\162\34\43\21\0\1\43" +
                    "\6\0\7\43\1\163\25\43\7\0\1\164\53\0\2\165" +
                    "\45\0\1\166\4\0\1\123\16\0\1\123\27\0\1\167" +
                    "\3\0\1\153\5\0\1\170\1\0\1\171\3\0\1\172" +
                    "\13\0\1\153\30\0\1\173\40\0\1\56\75\0\1\15" +
                    "\64\0\1\61\6\0\35\61\21\0\1\43\6\0\22\43" +
                    "\1\174\12\43\4\0\1\175\14\0\1\43\6\0\13\43" +
                    "\1\176\21\43\21\0\1\43\6\0\3\43\1\177\24\43" +
                    "\1\200\2\43\1\177\1\43\21\0\1\43\6\0\2\43" +
                    "\1\201\32\43\21\0\1\43\6\0\6\43\1\202\26\43" +
                    "\32\0\1\203\53\0\1\43\6\0\23\43\1\204\10\43" +
                    "\1\204\21\0\1\43\6\0\23\43\1\205\10\43\1\205" +
                    "\21\0\1\43\6\0\22\43\1\206\12\43\4\0\1\207" +
                    "\14\0\1\43\6\0\1\210\14\43\1\211\6\43\1\212" +
                    "\10\43\21\0\1\43\6\0\21\43\1\213\13\43\21\0" +
                    "\1\43\6\0\23\43\1\214\10\43\1\214\21\0\1\43" +
                    "\6\0\13\43\1\215\6\43\1\216\12\43\4\0\1\217" +
                    "\14\0\1\43\6\0\22\43\1\220\12\43\4\0\1\221" +
                    "\45\0\1\221\16\0\1\221\14\0\1\43\6\0\22\43" +
                    "\1\222\12\43\4\0\1\223\14\0\1\43\6\0\17\43" +
                    "\1\224\15\43\21\0\1\43\6\0\3\43\1\225\17\43" +
                    "\1\226\7\43\1\225\1\226\21\0\1\43\6\0\2\43" +
                    "\1\227\32\43\21\0\1\43\6\0\10\43\1\230\24\43" +
                    "\3\0\1\231\26\0\1\232\53\0\1\43\6\0\13\43" +
                    "\1\233\21\43\21\0\1\43\6\0\16\43\1\234\16\43" +
                    "\21\0\1\43\6\0\15\43\1\235\17\43\21\0\1\43" +
                    "\6\0\16\43\1\236\16\43\21\0\1\43\6\0\25\43" +
                    "\1\237\7\43\21\0\1\43\6\0\3\43\1\240\11\43" +
                    "\1\241\4\43\1\242\1\243\7\43\1\240\1\243\4\0" +
                    "\1\244\14\0\1\43\6\0\10\43\1\245\24\43\3\0" +
                    "\1\246\15\0\1\43\6\0\30\43\1\247\4\43\21\0" +
                    "\1\43\6\0\1\250\4\43\1\251\7\43\1\252\17\43" +
                    "\21\0\1\43\6\0\12\43\1\253\1\43\1\254\20\43" +
                    "\5\0\1\255\13\0\1\43\6\0\2\43\1\256\23\43" +
                    "\1\257\6\43\42\0\1\255\1\0\1\260\25\0\1\255" +
                    "\13\0\1\43\6\0\27\43\1\261\5\43\21\0\1\43" +
                    "\6\0\14\43\1\262\20\43\21\0\1\43\6\0\15\43" +
                    "\1\263\17\43\21\0\1\43\6\0\3\43\1\264\27\43" +
                    "\1\264\1\43\45\0\1\265\40\0\1\43\6\0\23\43" +
                    "\1\266\10\43\1\266\21\0\1\43\6\0\13\43\1\267" +
                    "\21\43\21\0\1\43\6\0\11\43\1\270\23\43\21\0" +
                    "\1\43\6\0\5\43\1\271\27\43\21\0\1\43\6\0" +
                    "\3\43\1\272\27\43\1\272\1\43\21\0\1\43\6\0" +
                    "\23\43\1\273\10\43\1\273\21\0\1\43\6\0\13\43" +
                    "\1\274\7\43\1\275\10\43\1\275\21\0\1\43\6\0" +
                    "\31\43\1\276\3\43\21\0\1\43\6\0\14\43\1\277" +
                    "\20\43\21\0\1\43\6\0\21\43\1\300\13\43\21\0" +
                    "\1\43\6\0\1\43\1\301\12\43\1\302\20\43\61\0" +
                    "\1\303\24\0\1\43\6\0\4\43\1\304\30\43\21\0" +
                    "\1\43\6\0\14\43\1\305\20\43\21\0\1\43\6\0" +
                    "\1\306\7\43\1\307\13\43\1\310\10\43\3\0\1\311" +
                    "\15\0\1\43\6\0\17\43\1\312\15\43\44\0\1\313" +
                    "\41\0\1\43\6\0\3\43\1\314\13\43\1\315\13\43" +
                    "\1\314\1\43\21\0\1\43\6\0\13\43\1\316\21\43" +
                    "\21\0\1\43\6\0\4\43\1\317\30\43\7\0\1\320" +
                    "\42\0\1\321\16\0\1\321\26\0\1\322\11\0\1\323" +
                    "\4\0\1\244\1\324\7\0\1\322\1\324\4\0\1\244" +
                    "\36\0\1\325\7\0\1\326\10\0\1\326\44\0\1\327" +
                    "\71\0\1\330\44\0\1\331\12\0\1\332\100\0\1\333" +
                    "\25\0\1\43\6\0\26\43\1\334\6\43\21\0\1\43" +
                    "\6\0\7\43\1\335\25\43\21\0\1\43\6\0\4\43" +
                    "\1\336\30\43\34\0\1\337\51\0\1\43\6\0\13\43" +
                    "\1\340\21\43\21\0\1\43\6\0\2\43\1\341\32\43" +
                    "\21\0\1\43\6\0\15\43\1\342\17\43\21\0\1\43" +
                    "\6\0\21\43\1\343\13\43\21\0\1\43\6\0\4\43" +
                    "\1\344\30\43\21\0\1\43\6\0\4\43\1\345\30\43" +
                    "\21\0\1\43\6\0\2\43\1\346\32\43\32\0\1\347" +
                    "\53\0\1\43\6\0\23\43\1\350\10\43\1\350\53\0" +
                    "\1\351\10\0\1\351\21\0\1\43\6\0\4\43\1\352" +
                    "\30\43\34\0\1\353\51\0\1\43\6\0\23\43\1\354" +
                    "\10\43\1\354\21\0\1\43\6\0\21\43\1\355\13\43" +
                    "\21\0\1\43\6\0\1\356\34\43\21\0\1\43\6\0" +
                    "\22\43\1\357\12\43\4\0\1\360\45\0\1\360\16\0" +
                    "\1\360\23\0\1\361\55\0\1\43\6\0\22\43\1\310" +
                    "\12\43\4\0\1\362\14\0\1\43\6\0\14\43\1\363" +
                    "\20\43\21\0\1\43\6\0\2\43\1\364\32\43\21\0" +
                    "\1\43\6\0\24\43\1\365\10\43\21\0\1\43\6\0" +
                    "\10\43\1\366\24\43\3\0\1\367\15\0\1\43\6\0" +
                    "\4\43\1\370\30\43\21\0\1\43\6\0\4\43\1\371" +
                    "\30\43\21\0\1\43\6\0\4\43\1\372\30\43\21\0" +
                    "\1\43\6\0\4\43\1\373\11\43\1\374\16\43\34\0" +
                    "\1\375\51\0\1\43\6\0\15\43\1\376\17\43\45\0" +
                    "\1\377\40\0\1\43\6\0\3\43\1\u0100\27\43\1\u0100" +
                    "\1\43\21\0\1\43\6\0\23\43\1\u0101\10\43\1\u0101" +
                    "\21\0\1\43\6\0\6\43\1\u0102\26\43\21\0\1\43" +
                    "\6\0\4\43\1\u0103\30\43\21\0\1\43\6\0\10\43" +
                    "\1\u0104\24\43\3\0\1\u0105\30\0\1\u0106\51\0\1\43" +
                    "\6\0\1\u0107\34\43\21\0\1\43\6\0\4\43\1\u0108" +
                    "\30\43\40\0\1\u0105\27\0\1\u0105\15\0\1\43\6\0" +
                    "\1\43\1\u0109\33\43\21\0\1\43\6\0\13\43\1\u010a" +
                    "\21\43\21\0\1\43\6\0\4\43\1\u010b\30\43\21\0" +
                    "\1\43\6\0\22\43\1\u010c\12\43\4\0\1\u010d\14\0" +
                    "\1\43\6\0\4\43\1\u010e\30\43\21\0\1\43\6\0" +
                    "\4\43\1\u010f\30\43\21\0\1\43\6\0\4\43\1\u0110" +
                    "\30\43\21\0\1\43\6\0\4\43\1\u0111\30\43\21\0" +
                    "\1\43\6\0\4\43\1\u0112\30\43\21\0\1\43\6\0" +
                    "\23\43\1\u0113\10\43\1\u0113\21\0\1\43\6\0\22\43" +
                    "\1\u0114\12\43\4\0\1\u0115\27\0\1\u0116\51\0\1\43" +
                    "\6\0\15\43\1\u0117\17\43\21\0\1\43\6\0\4\43" +
                    "\1\u0118\30\43\21\0\1\43\6\0\10\43\1\u0119\24\43" +
                    "\3\0\1\u011a\15\0\1\43\6\0\14\43\1\u011b\20\43" +
                    "\21\0\1\43\6\0\4\43\1\u011c\30\43\44\0\1\u011d" +
                    "\41\0\1\43\6\0\4\43\1\u011e\30\43\34\0\1\u011f" +
                    "\51\0\1\43\6\0\1\u0120\34\43\21\0\1\43\6\0" +
                    "\4\43\1\u0121\30\43\21\0\1\43\6\0\24\43\1\u0122" +
                    "\10\43\21\0\1\43\6\0\15\43\1\u0123\3\43\1\u0124" +
                    "\13\43\7\0\1\320\1\u0125\63\0\1\320\111\0\1\u0126" +
                    "\64\0\1\u0127\64\0\1\u0128\11\0\1\u0129\52\0\1\u012a" +
                    "\64\0\1\u012b\103\0\1\u012c\10\0\1\u012c\52\0\1\u0115" +
                    "\16\0\1\u0115\14\0\1\43\6\0\4\43\1\u012d\30\43" +
                    "\21\0\1\43\6\0\4\43\1\u012e\30\43\21\0\1\43" +
                    "\6\0\1\u012f\34\43\21\0\1\43\6\0\23\43\1\u0130" +
                    "\10\43\1\u0130\21\0\1\43\6\0\4\43\1\u0131\30\43" +
                    "\21\0\1\43\6\0\23\43\1\u0132\10\43\1\u0132\21\0" +
                    "\1\43\6\0\10\43\1\u0133\24\43\3\0\1\u0134\34\0" +
                    "\1\u0134\27\0\1\u0134\15\0\1\43\6\0\30\43\1\u0135" +
                    "\4\43\21\0\1\43\6\0\30\43\1\u0136\4\43\21\0" +
                    "\1\43\6\0\17\43\1\u0137\15\43\21\0\1\43\6\0" +
                    "\23\43\1\u0138\10\43\1\u0138\53\0\1\u0139\10\0\1\u0139" +
                    "\47\0\1\u013a\51\0\1\u013b\51\0\1\43\6\0\23\43" +
                    "\1\u013c\10\43\1\u013c\21\0\1\43\6\0\17\43\1\u013d" +
                    "\15\43\21\0\1\43\6\0\15\43\1\u013e\17\43\45\0" +
                    "\1\u013f\40\0\1\43\6\0\27\43\1\u0140\5\43\21\0" +
                    "\1\43\6\0\21\43\1\u0141\13\43\21\0\1\43\6\0" +
                    "\21\43\1\u0142\13\43\21\0\1\43\6\0\6\43\1\u0143" +
                    "\26\43\51\0\1\u0144\34\0\1\43\6\0\10\43\1\u0145" +
                    "\24\43\3\0\1\u0146\15\0\1\43\6\0\23\43\1\u0147" +
                    "\10\43\1\u0147\21\0\1\43\6\0\23\43\1\u0148\10\43" +
                    "\1\u0148\53\0\1\u0149\10\0\1\u0149\21\0\1\43\6\0" +
                    "\23\43\1\u014a\10\43\1\u014a\21\0\1\43\6\0\21\43" +
                    "\1\u014b\13\43\21\0\1\43\6\0\4\43\1\u014c\30\43" +
                    "\21\0\1\43\6\0\10\43\1\u014d\24\43\3\0\1\u014e" +
                    "\15\0\1\43\6\0\2\43\1\u014f\32\43\21\0\1\43" +
                    "\6\0\4\43\1\u0150\30\43\34\0\1\u0151\51\0\1\43" +
                    "\6\0\21\43\1\u0152\13\43\21\0\1\43\6\0\21\43" +
                    "\1\u0153\13\43\21\0\1\43\6\0\2\43\1\u0154\32\43" +
                    "\21\0\1\43\6\0\23\43\1\u0155\10\43\1\u0155\53\0" +
                    "\1\u0156\10\0\1\u0156\21\0\1\43\6\0\22\43\1\u0157" +
                    "\12\43\4\0\1\u0158\14\0\1\43\6\0\13\43\1\u0159" +
                    "\21\43\43\0\1\u015a\73\0\1\u0158\16\0\1\u0158\14\0" +
                    "\1\43\6\0\23\43\1\u015b\10\43\1\u015b\21\0\1\43" +
                    "\6\0\21\43\1\u015c\13\43\21\0\1\43\6\0\4\43" +
                    "\1\u015d\30\43\21\0\1\43\6\0\4\43\1\u015e\30\43" +
                    "\6\0\2\u0125\1\u015f\62\u0125\51\0\1\u0160\56\0\1\u0161" +
                    "\51\0\1\u0162\60\0\1\u0163\53\0\1\43\6\0\4\43" +
                    "\1\u0164\30\43\21\0\1\43\6\0\22\43\1\u0165\12\43" +
                    "\4\0\1\u0166\14\0\1\43\6\0\23\43\1\u0167\10\43" +
                    "\1\u0167\21\0\1\43\6\0\15\43\1\u0168\17\43\21\0" +
                    "\1\43\6\0\4\43\1\u0169\30\43\21\0\1\43\6\0" +
                    "\15\43\1\u016a\17\43\45\0\1\u016b\40\0\1\43\6\0" +
                    "\4\43\1\u016c\30\43\21\0\1\43\6\0\22\43\1\u016d" +
                    "\12\43\4\0\1\u016e\45\0\1\u016e\16\0\1\u016e\27\0" +
                    "\1\u016f\51\0\1\43\6\0\10\43\1\u0170\24\43\3\0" +
                    "\1\u0171\15\0\1\43\6\0\6\43\1\u0172\26\43\36\0" +
                    "\1\u0173\47\0\1\43\6\0\23\43\1\u0174\10\43\1\u0174" +
                    "\21\0\1\43\6\0\4\43\1\u0175\30\43\53\0\1\u0176" +
                    "\10\0\1\u0176\21\0\1\43\6\0\15\43\1\u0177\17\43" +
                    "\45\0\1\u0178\40\0\1\43\6\0\7\43\1\u0179\25\43" +
                    "\21\0\1\43\6\0\4\43\1\u017a\30\43\21\0\1\43" +
                    "\6\0\21\43\1\u017b\13\43\21\0\1\43\6\0\5\43" +
                    "\1\u017c\27\43\35\0\1\u017d\50\0\1\43\6\0\23\43" +
                    "\1\u017e\10\43\1\u017e\21\0\1\43\6\0\23\43\1\u017f" +
                    "\10\43\1\u017f\53\0\1\u0180\10\0\1\u0180\21\0\1\43" +
                    "\6\0\23\43\1\u0181\10\43\1\u0181\21\0\1\43\6\0" +
                    "\21\43\1\u0182\13\43\51\0\1\u0183\34\0\1\43\6\0" +
                    "\23\43\1\u0184\10\43\1\u0184\53\0\1\u0185\10\0\1\u0185" +
                    "\21\0\1\43\6\0\10\43\1\u0186\24\43\3\0\1\u0187" +
                    "\34\0\1\u0187\27\0\1\u0187\15\0\1\43\6\0\4\43" +
                    "\1\u0188\30\43\21\0\1\43\6\0\22\43\1\u0189\12\43" +
                    "\4\0\1\u018a\2\0\1\u018b\1\u0125\55\0\1\u018c\32\0" +
                    "\1\u018d\103\0\1\u018e\10\0\1\u018e\21\0\1\43\6\0" +
                    "\15\43\1\u018f\17\43\21\0\1\43\6\0\2\43\1\u0190" +
                    "\32\43\32\0\1\u0191\53\0\1\43\6\0\23\43\1\u0192" +
                    "\10\43\1\u0192\21\0\1\43\6\0\2\43\1\u0193\32\43" +
                    "\32\0\1\u0194\53\0\1\43\6\0\16\43\1\u0195\16\43" +
                    "\46\0\1\u0196\37\0\1\43\6\0\21\43\1\u0197\13\43" +
                    "\21\0\1\43\6\0\6\43\1\u0198\26\43\36\0\1\u0199" +
                    "\47\0\1\43\6\0\10\43\1\u019a\24\43\3\0\1\u019b" +
                    "\34\0\1\u019b\27\0\1\u019b\15\0\1\43\6\0\1\u019c" +
                    "\34\43\30\0\1\u019d\55\0\1\43\6\0\15\43\1\u019e" +
                    "\17\43\45\0\1\u019f\26\0\1\u018b\56\0\1\u018c\47\0" +
                    "\1\u01a0\34\0\1\43\6\0\4\43\1\u01a1\30\43\34\0" +
                    "\1\u01a2\51\0\1\43\6\0\32\43\1\u01a3\2\43\21\0" +
                    "\1\43\6\0\23\43\1\u01a4\10\43\1\u01a4\53\0\1\u01a5" +
                    "\10\0\1\u01a5\21\0\1\43\6\0\15\43\1\u01a6\17\43" +
                    "\45\0\1\u01a7\40\0\1\43\6\0\15\43\1\u01a8\17\43" +
                    "\45\0\1\u01a9\40\0\1\43\6\0\14\43\1\u01aa\20\43" +
                    "\44\0\1\u01ab\41\0\1\43\6\0\6\43\1\u01ac\26\43" +
                    "\36\0\1\u01ad\47\0\1\43\6\0\3\43\1\u01ae\17\43" +
                    "\1\u01af\7\43\1\u01ae\1\u01af\21\0\1\43\6\0\6\43" +
                    "\1\u01b0\26\43\36\0\1\u01b1\47\0\1\43\6\0\17\43" +
                    "\1\u01b2\15\43\47\0\1\u01b3\36\0\1\43\6\0\1\u01b4" +
                    "\34\43\21\0\1\43\6\0\10\43\1\u01b5\24\43\3\0" +
                    "\1\u01b6\15\0\1\43\6\0\23\43\1\u01b7\10\43\1\u01b7" +
                    "\21\0\1\43\6\0\14\43\1\u01b8\20\43\44\0\1\u01b9" +
                    "\41\0\1\43\6\0\4\43\1\u01ba\30\43\21\0\1\43" +
                    "\6\0\4\43\1\u01bb\30\43\34\0\1\u01bc\51\0\1\43" +
                    "\6\0\22\43\1\u01bd\12\43\4\0\1\u01be\45\0\1\u01be" +
                    "\16\0\1\u01be\14\0\1\43\6\0\23\43\1\u01bf\10\43" +
                    "\1\u01bf\53\0\1\u01c0\10\0\1\u01c0\21\0\1\43\6\0" +
                    "\1\u01c1\34\43\30\0\1\u01c2\55\0\1\43\6\0\14\43" +
                    "\1\u01c3\20\43\44\0\1\u01c4\41\0\1\43\6\0\17\43" +
                    "\1\u01c5\15\43\47\0\1\u01c6\23\0";

    private static int[] zzUnpacktrans() {
        int[] result = new int[17225];
        int offset = 0;
        offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpacktrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\11\2\1\10\11\2\1\1\11\1\1\1\11" +
                    "\30\1\1\11\3\1\1\0\1\1\1\0\1\1\3\11" +
                    "\20\1\1\0\5\1\1\0\7\1\1\11\5\1\1\0" +
                    "\4\1\1\0\14\1\1\0\4\1\1\0\3\1\2\0" +
                    "\1\1\5\0\1\1\1\11\5\1\1\11\3\1\1\0" +
                    "\7\1\1\0\1\1\1\0\1\1\1\0\5\1\2\0" +
                    "\11\1\1\0\1\1\1\0\6\1\1\0\2\1\1\0" +
                    "\4\1\1\11\15\1\1\0\5\1\1\0\1\1\1\0" +
                    "\4\1\6\0\1\11\3\0\2\11\3\1\1\11\7\1" +
                    "\1\11\1\1\1\0\1\1\1\11\4\1\3\0\4\1" +
                    "\1\0\5\1\1\0\1\1\1\11\5\1\1\0\1\11" +
                    "\6\1\1\0\7\1\1\0\1\11\3\1\1\0\2\1" +
                    "\1\11\7\1\4\0\1\11\1\0\2\11\7\1\1\0" +
                    "\4\1\2\0\1\11\3\1\1\0\4\1\1\0\1\1" +
                    "\1\0\2\1\1\11\4\1\1\0\2\1\1\0\4\1" +
                    "\1\0\1\1\1\0\1\1\1\0\4\1\1\0\2\11" +
                    "\2\0\2\1\1\0\4\1\1\0\2\1\2\11\1\1" +
                    "\1\0\1\1\1\11\2\1\1\11\1\1\1\0\4\1" +
                    "\1\11\2\1\1\11\2\1\1\0\1\1\1\0\1\1" +
                    "\1\0\2\1\1\11\1\0\1\11\1\0\1\11\2\1" +
                    "\1\0\2\1\1\0\1\1\1\0\2\1\1\11\1\1" +
                    "\1\0\1\1\1\0\1\1\1\0\1\11\1\1\1\11" +
                    "\2\1\1\11\1\1\1\11\1\1\1\0\1\1\1\0" +
                    "\1\1\1\11\3\1\1\11\1\1\1\11\2\1\1\0" +
                    "\2\1\1\0\4\1\1\0\1\1\1\0\1\1\1\0" +
                    "\1\1\1\0\1\1\1\11";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[454];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * Number of newlines encountered up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    private int yyline;

    /**
     * Number of characters from the last newline up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    protected int yycolumn;

    /**
     * Number of characters up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    private long yychar;

    /**
     * Whether the scanner is currently at the beginning of a line.
     */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;

    /**
     * Whether the user-EOF-code has already been executed.
     */
    @SuppressWarnings("unused")
    private boolean zzEOFDone;

    /* user code: */
    public _SqlLexer() {
        this((java.io.Reader) null);
    }


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _SqlLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Returns the maximum size of the scanner buffer, which limits the size of tokens.
     */
    private int zzMaxBufferLen() {
        return Integer.MAX_VALUE;
    }

    /**
     * Whether the scanner buffer can grow to accommodate a larger token.
     */
    private boolean zzCanGrow() {
        return true;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input) {
        int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return BAD_CHARACTER;
                    }
                    // fall through
                    case 107:
                        break;
                    case 2: {
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 108:
                        break;
                    case 3: {
                        return LPAREN;
                    }
                    // fall through
                    case 109:
                        break;
                    case 4: {
                        return RPAREN;
                    }
                    // fall through
                    case 110:
                        break;
                    case 5: {
                        return MUL;
                    }
                    // fall through
                    case 111:
                        break;
                    case 6: {
                        return PLUS;
                    }
                    // fall through
                    case 112:
                        break;
                    case 7: {
                        return COMMA;
                    }
                    // fall through
                    case 113:
                        break;
                    case 8: {
                        return MINUS;
                    }
                    // fall through
                    case 114:
                        break;
                    case 9: {
                        return DOT;
                    }
                    // fall through
                    case 115:
                        break;
                    case 10: {
                        return DIV;
                    }
                    // fall through
                    case 116:
                        break;
                    case 11: {
                        return NUMERIC;
                    }
                    // fall through
                    case 117:
                        break;
                    case 12: {
                        return COLON;
                    }
                    // fall through
                    case 118:
                        break;
                    case 13: {
                        return SEMICOLON;
                    }
                    // fall through
                    case 119:
                        break;
                    case 14: {
                        return LT;
                    }
                    // fall through
                    case 120:
                        break;
                    case 15: {
                        return EQ;
                    }
                    // fall through
                    case 121:
                        break;
                    case 16: {
                        return GT;
                    }
                    // fall through
                    case 122:
                        break;
                    case 17: {
                        return NAMED_INPUT_PARAMETER;
                    }
                    // fall through
                    case 123:
                        break;
                    case 18: {
                        return ID;
                    }
                    // fall through
                    case 124:
                        break;
                    case 19: {
                        return RBRACE;
                    }
                    // fall through
                    case 125:
                        break;
                    case 20: {
                        return STRING;
                    }
                    // fall through
                    case 126:
                        break;
                    case 21: {
                        return LTE;
                    }
                    // fall through
                    case 127:
                        break;
                    case 22: {
                        return NEQ;
                    }
                    // fall through
                    case 128:
                        break;
                    case 23: {
                        return GTE;
                    }
                    // fall through
                    case 129:
                        break;
                    case 24: {
                        return NUMERIC_INPUT_PARAMETER;
                    }
                    // fall through
                    case 130:
                        break;
                    case 25: {
                        return AS;
                    }
                    // fall through
                    case 131:
                        break;
                    case 26: {
                        return BY;
                    }
                    // fall through
                    case 132:
                        break;
                    case 27: {
                        return IN;
                    }
                    // fall through
                    case 133:
                        break;
                    case 28: {
                        return IS;
                    }
                    // fall through
                    case 134:
                        break;
                    case 29: {
                        return OF;
                    }
                    // fall through
                    case 135:
                        break;
                    case 30: {
                        return ON;
                    }
                    // fall through
                    case 136:
                        break;
                    case 31: {
                        return OR;
                    }
                    // fall through
                    case 137:
                        break;
                    case 32: {
                        return ABS;
                    }
                    // fall through
                    case 138:
                        break;
                    case 33: {
                        return ALL;
                    }
                    // fall through
                    case 139:
                        break;
                    case 34: {
                        return AND;
                    }
                    // fall through
                    case 140:
                        break;
                    case 35: {
                        return ANY;
                    }
                    // fall through
                    case 141:
                        break;
                    case 36: {
                        return ASC;
                    }
                    // fall through
                    case 142:
                        break;
                    case 37: {
                        return AVG;
                    }
                    // fall through
                    case 143:
                        break;
                    case 38: {
                        return END;
                    }
                    // fall through
                    case 144:
                        break;
                    case 39: {
                        return KEY;
                    }
                    // fall through
                    case 145:
                        break;
                    case 40: {
                        return MAX;
                    }
                    // fall through
                    case 146:
                        break;
                    case 41: {
                        return MIN;
                    }
                    // fall through
                    case 147:
                        break;
                    case 42: {
                        return MOD;
                    }
                    // fall through
                    case 148:
                        break;
                    case 43: {
                        return NOT;
                    }
                    // fall through
                    case 149:
                        break;
                    case 44: {
                        return SET;
                    }
                    // fall through
                    case 150:
                        break;
                    case 45: {
                        return SUM;
                    }
                    // fall through
                    case 151:
                        break;
                    case 46: {
                        return BOTH;
                    }
                    // fall through
                    case 152:
                        break;
                    case 47: {
                        return CASE;
                    }
                    // fall through
                    case 153:
                        break;
                    case 48: {
                        return DATE;
                    }
                    // fall through
                    case 154:
                        break;
                    case 49: {
                        return DESC;
                    }
                    // fall through
                    case 155:
                        break;
                    case 50: {
                        return ELSE;
                    }
                    // fall through
                    case 156:
                        break;
                    case 51: {
                        return FROM;
                    }
                    // fall through
                    case 157:
                        break;
                    case 52: {
                        return INTO;
                    }
                    // fall through
                    case 158:
                        break;
                    case 53: {
                        return JOIN;
                    }
                    // fall through
                    case 159:
                        break;
                    case 54: {
                        return LEFT;
                    }
                    // fall through
                    case 160:
                        break;
                    case 55: {
                        return LIKE;
                    }
                    // fall through
                    case 161:
                        break;
                    case 56: {
                        return NULL;
                    }
                    // fall through
                    case 162:
                        break;
                    case 57: {
                        return SIZE;
                    }
                    // fall through
                    case 163:
                        break;
                    case 58: {
                        return SOME;
                    }
                    // fall through
                    case 164:
                        break;
                    case 59: {
                        return SQRT;
                    }
                    // fall through
                    case 165:
                        break;
                    case 60: {
                        return THEN;
                    }
                    // fall through
                    case 166:
                        break;
                    case 61: {
                        return TIME;
                    }
                    // fall through
                    case 167:
                        break;
                    case 62: {
                        return TRIM;
                    }
                    // fall through
                    case 168:
                        break;
                    case 63: {
                        return BOOLEAN;
                    }
                    // fall through
                    case 169:
                        break;
                    case 64: {
                        return TYPE;
                    }
                    // fall through
                    case 170:
                        break;
                    case 65: {
                        return WHEN;
                    }
                    // fall through
                    case 171:
                        break;
                    case 66: {
                        return COUNT;
                    }
                    // fall through
                    case 172:
                        break;
                    case 67: {
                        return EMPTY;
                    }
                    // fall through
                    case 173:
                        break;
                    case 68: {
                        return ENTRY;
                    }
                    // fall through
                    case 174:
                        break;
                    case 69: {
                        return GROUP;
                    }
                    // fall through
                    case 175:
                        break;
                    case 70: {
                        return INDEX;
                    }
                    // fall through
                    case 176:
                        break;
                    case 71: {
                        return INNER;
                    }
                    // fall through
                    case 177:
                        break;
                    case 72: {
                        return LIMIT;
                    }
                    // fall through
                    case 178:
                        break;
                    case 73: {
                        return LOWER;
                    }
                    // fall through
                    case 179:
                        break;
                    case 74: {
                        return ORDER;
                    }
                    // fall through
                    case 180:
                        break;
                    case 75: {
                        return OUTER;
                    }
                    // fall through
                    case 181:
                        break;
                    case 76: {
                        return UPPER;
                    }
                    // fall through
                    case 182:
                        break;
                    case 77: {
                        return VALUE;
                    }
                    // fall through
                    case 183:
                        break;
                    case 78: {
                        return WHERE;
                    }
                    // fall through
                    case 184:
                        break;
                    case 79: {
                        return CONCAT;
                    }
                    // fall through
                    case 185:
                        break;
                    case 80: {
                        return DELETE;
                    }
                    // fall through
                    case 186:
                        break;
                    case 81: {
                        return ESCAPE;
                    }
                    // fall through
                    case 187:
                        break;
                    case 82: {
                        return EXISTS;
                    }
                    // fall through
                    case 188:
                        break;
                    case 83: {
                        return HAVING;
                    }
                    // fall through
                    case 189:
                        break;
                    case 84: {
                        return INSERT;
                    }
                    // fall through
                    case 190:
                        break;
                    case 85: {
                        return LENGTH;
                    }
                    // fall through
                    case 191:
                        break;
                    case 86: {
                        return LOCATE;
                    }
                    // fall through
                    case 192:
                        break;
                    case 87: {
                        return MEMBER;
                    }
                    // fall through
                    case 193:
                        break;
                    case 88: {
                        return NULLIF;
                    }
                    // fall through
                    case 194:
                        break;
                    case 89: {
                        return OBJECT;
                    }
                    // fall through
                    case 195:
                        break;
                    case 90: {
                        return OFFSET;
                    }
                    // fall through
                    case 196:
                        break;
                    case 91: {
                        return SELECT;
                    }
                    // fall through
                    case 197:
                        break;
                    case 92: {
                        return UPDATE;
                    }
                    // fall through
                    case 198:
                        break;
                    case 93: {
                        return VALUES;
                    }
                    // fall through
                    case 199:
                        break;
                    case 94: {
                        return DATETIME;
                    }
                    // fall through
                    case 200:
                        break;
                    case 95: {
                        return BETWEEN;
                    }
                    // fall through
                    case 201:
                        break;
                    case 96: {
                        return INTEGER;
                    }
                    // fall through
                    case 202:
                        break;
                    case 97: {
                        return LEADING;
                    }
                    // fall through
                    case 203:
                        break;
                    case 98: {
                        return COALESCE;
                    }
                    // fall through
                    case 204:
                        break;
                    case 99: {
                        return DISTINCT;
                    }
                    // fall through
                    case 205:
                        break;
                    case 100: {
                        return FUNCTION;
                    }
                    // fall through
                    case 206:
                        break;
                    case 101: {
                        return TRAILING;
                    }
                    // fall through
                    case 207:
                        break;
                    case 102: {
                        return SUBSTRING;
                    }
                    // fall through
                    case 208:
                        break;
                    case 103: {
                        return TIMESTAMP;
                    }
                    // fall through
                    case 209:
                        break;
                    case 104: {
                        return CURRENT_DATE;
                    }
                    // fall through
                    case 210:
                        break;
                    case 105: {
                        return CURRENT_TIME;
                    }
                    // fall through
                    case 211:
                        break;
                    case 106: {
                        return CURRENT_TIMESTAMP;
                    }
                    // fall through
                    case 212:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
