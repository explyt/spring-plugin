/*
 * Copyright Â© 2024 Explyt Ltd
 *
 * All rights reserved.
 *
 * This code and software are the property of Explyt Ltd and are protected by copyright and other intellectual property laws.
 *
 * You may use this code under the terms of the Explyt Source License Version 1.0 ("License"), if you accept its terms and conditions.
 *
 * By installing, downloading, accessing, using, or distributing this code, you agree to the terms and conditions of the License.
 * If you do not agree to such terms and conditions, you must cease using this code and immediately delete all copies of it.
 *
 * You may obtain a copy of the License at: https://github.com/explyt/spring-plugin/blob/main/EXPLYT-SOURCE-LICENSE.md
 *
 * Unauthorized use of this code constitutes a violation of intellectual property rights and may result in legal action.
 */

{
    parserClass="com.explyt.spring.web.language.http.parser.HttpParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Http"
    psiImplClassSuffix="Impl"
    psiPackage="com.explyt.spring.web.language.http.psi"
    psiPackage="com.explyt.spring.web.language.http.psi.impl"

    elementTypeHolderClass="com.explyt.spring.web.language.http.psi.HttpTypes"
    elementTypeClass="com.explyt.spring.web.language.http.psi.HttpElementType"
    tokenTypeClass="com.explyt.spring.web.language.http.psi.HttpTokenType"

    tokens = [
        CRLF="regexp:\r?\n"
        SP=" "
        OWS="regexp:[ \t]*" // Optional White Space

        REQUEST_SEPARATOR = '###'
        BODY_REQUEST_SEPARATOR='regexp:###.*'

        COMMENT_SEPARATOR = 'regexp://|#'
        COMMENT_LINE = 'regexp:(//|#).*'
        TAG_COMMENT_LINE_1 = 'regexp:#\s*@.+'
        TAG_COMMENT_LINE_2 = 'regexp://\s*@.+'

        META_TOKEN="regexp:([^\\{}\s]|\\\\|\\\{|\\})*"
        TAG_TOKEN="regexp:@([^\\{}\s]|\\\\|\\\{|\\})*"

        LBRACES = '{{'
        RBRACES = '}}'
        IDENTIFIER = "regexp:\$?[\w\-_.\[\]]+"

        FULL_REQUEST_LINE="regexp:[!#$%&'*+\-.^_`|~\p{Alnum}}]+ \S+( HTTP/\d\.\d)?"
        GET_OMMITED_REQUEST_LINE="regexp:\S+( HTTP/\d\.\d)?"

        REQUEST_TARGET_VALUE="regexp:[^\s{}]*"
        HTTP_VERSION="regexp:HTTP/\d\.\d"

        HTTP_TOKEN="regexp:[!#$%&'*+\-.^_`|~\p{Alnum}}]+" // 1*tchar
        // tchar = "!" / "#" / "$" / "%" / "&" / "'" / "*"
        //       / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
        //       / DIGIT / ALPHA

        COLON=":"
        FIELD_CONTENT_TOKEN="regexp:([!\"$-.0-\[\]-z|~\x80-\xff]|\\\\|\\/|\\#|\\\{|\\})*" // field-vchar*
        // field-vchar = VCHAR / obs-text
        // obs-text = %x80-FF

        REQUEST_BODY_VALUE="regexp:([^\\/#{}]|\\\\|\\/|\\#|\\\{|\\})*"
    ]
    consumeTokenMethod = "consumeTokenFast"
}

////////////////////////////////////////////////////// FILE BASE ///////////////////////////////////////////////////////

http_file ::= requests

requests ::= any_request_block*

any_request_block ::= ( request_block | dummy_request_block )
{ pin=1; recoverWhile=recover_request }

request_block ::= CRLF* request_definer? CRLF*
                  ( comment CRLF* )*
                  request
{ pin=5 }

dummy_request_block ::= CRLF* ( request_definer | comment )? CRLF+
                        ( comment CRLF* )*
{ pin=3; recoverWhile=recover_request }

///////////////////////////////////////////////// PRE-REQUEST COMMENTS /////////////////////////////////////////////////

request_definer ::= REQUEST_SEPARATOR ( META_TOKEN | variable )*
comment ::= COMMENT_LINE | tag_comment_line
private tag_comment_line ::= COMMENT_SEPARATOR TAG_TOKEN ( META_TOKEN | variable )*

////////////////////////////////////////////////// REQUEST STRUCTURE ///////////////////////////////////////////////////

request ::= request_line [ expanded_crlf
            ( field_line [ expanded_crlf ] )*
            [ expanded_crlf [ request_body ] ] ]
{ pin=1; recoverWhile=recover_request }

///////////////////////////////////////////////////// REQUEST LINE /////////////////////////////////////////////////////

request_line ::= [ method SP ] request_target [ SP HTTP_VERSION ]
{ pin=2; recoverWhile=recover_line }

method ::= HTTP_TOKEN

request_target ::= ( REQUEST_TARGET_VALUE | variable )+

////////////////////////////////////////////////////// FIELD LINE //////////////////////////////////////////////////////

field_line ::= field_name ":" [OWS] field_value [OWS]
{ pin=2; recoverWhile=recover_line }

field_name ::= (HTTP_TOKEN | variable )+

field_value ::= field_content ( [ OWS ] field_content )* // field-vchar [ 1*( SP / HTAB / field-vchar ) field-vchar ]
private field_content ::= FIELD_CONTENT_TOKEN | variable

///////////////////////////////////////////////////// REQUEST BODY /////////////////////////////////////////////////////

request_body ::= ( REQUEST_BODY_VALUE | COMMENT_LINE | variable )+

///////////////////////////////////////////////////////// CORE /////////////////////////////////////////////////////////

private expanded_crlf ::= [ COMMENT_LINE ] CRLF

variable ::= recoverable_variable RBRACES
private recoverable_variable ::= LBRACES IDENTIFIER
{ pin=1; recoverWhile=recover_variable }

////////////////////////////////////////////////////// RECOVERIES //////////////////////////////////////////////////////

private recover_request ::= !(REQUEST_SEPARATOR)
private recover_line ::= !(COMMENT_LINE | CRLF)
private recover_variable ::= !(RBRACES | CRLF)