// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _HttpLexer.flex

package com.explyt.spring.web.language.http;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import java.util.ArrayList;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.explyt.spring.web.language.http.psi.HttpTypes.*;


public class _HttpLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int VARIABLE_STATE = 2;
  public static final int REQUEST_NAME_STATE = 4;
  public static final int TAG_COMMENT_STATE = 6;
  public static final int PRE_REQUEST_TARGET_STATE = 8;
  public static final int REQUEST_TARGET_STATE = 10;
  public static final int HTTP_VERSION_STATE = 12;
  public static final int FIELD_NAME_STATE = 14;
  public static final int FIELD_VALUE_STATE = 16;
  public static final int MESSAGE_BODY_STATE = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u7400\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\6"+
    "\1\7\1\10\1\11\3\6\2\7\2\6\1\7\1\12"+
    "\1\13\1\14\12\15\1\16\5\7\1\17\7\12\1\20"+
    "\7\12\1\21\3\12\1\22\6\12\1\23\1\24\1\23"+
    "\1\6\1\12\1\6\32\12\1\25\1\6\1\26\1\6"+
    "\1\0\5\7\1\27\32\7\1\30\11\7\1\12\12\7"+
    "\1\12\4\7\1\12\5\7\27\12\1\7\37\12\1\7"+
    "\10\12\u01c2\31\4\0\14\31\16\0\5\31\7\0\1\31"+
    "\1\0\1\31\21\0\105\32\1\31\52\32\5\31\1\0"+
    "\2\31\2\0\4\31\1\0\1\31\6\0\1\31\1\0"+
    "\3\31\1\0\1\31\1\0\24\31\1\0\123\31\1\0"+
    "\213\31\1\0\7\32\246\31\1\0\46\31\2\0\1\31"+
    "\6\0\51\31\10\0\37\32\16\31\1\0\1\31\1\0"+
    "\2\31\1\0\2\31\1\0\1\31\10\0\33\31\4\0"+
    "\4\31\35\0\13\31\5\0\70\31\1\32\21\31\4\0"+
    "\146\31\1\0\10\31\2\0\2\32\10\31\1\0\3\32"+
    "\20\31\2\0\1\31\20\0\60\31\13\32\2\0\145\31"+
    "\16\0\53\31\11\32\2\31\4\0\1\31\2\0\1\32"+
    "\2\0\30\31\2\32\23\31\1\32\22\0\31\31\3\32"+
    "\4\0\13\31\65\0\25\31\1\0\10\31\25\0\1\32"+
    "\14\31\2\32\1\0\7\31\6\32\114\31\1\32\20\31"+
    "\1\32\3\31\4\32\17\31\2\0\12\31\1\0\23\31"+
    "\1\0\10\31\2\0\2\31\2\0\26\31\1\0\7\31"+
    "\1\0\1\31\3\0\4\31\2\0\1\32\10\31\2\0"+
    "\2\31\2\0\2\31\1\32\1\31\10\0\1\31\4\0"+
    "\2\31\1\0\5\31\2\0\14\31\12\0\1\31\1\0"+
    "\1\32\2\0\3\31\1\0\6\31\4\0\2\31\2\0"+
    "\26\31\1\0\7\31\1\0\2\31\1\0\2\31\1\0"+
    "\2\31\2\0\1\32\1\0\5\31\4\0\2\31\2\0"+
    "\2\31\1\32\3\0\1\31\7\0\4\31\1\0\1\31"+
    "\7\0\20\31\13\0\3\31\1\0\11\31\1\0\3\31"+
    "\1\0\26\31\1\0\7\31\1\0\2\31\1\0\5\31"+
    "\2\0\1\32\11\31\1\0\3\31\1\0\2\31\1\32"+
    "\2\0\1\31\17\0\4\31\2\0\12\31\11\0\4\31"+
    "\3\32\1\0\3\31\1\0\10\31\2\0\2\31\2\0"+
    "\26\31\1\0\7\31\1\0\2\31\1\0\5\31\2\0"+
    "\1\32\10\31\2\0\2\31\2\0\2\31\1\32\10\0"+
    "\2\31\4\0\2\31\1\0\5\31\2\0\12\31\1\0"+
    "\1\31\20\0\2\31\1\0\6\31\3\0\3\31\1\0"+
    "\4\31\3\0\2\31\1\0\1\31\1\0\2\31\3\0"+
    "\2\31\3\0\3\31\3\0\14\31\4\0\5\31\3\0"+
    "\3\31\1\0\3\31\1\32\2\0\1\31\6\0\1\31"+
    "\16\0\12\31\20\0\4\31\1\32\10\31\1\0\3\31"+
    "\1\0\27\31\1\0\20\31\3\0\10\31\1\0\3\31"+
    "\1\0\3\31\1\32\7\0\2\31\1\0\3\31\5\0"+
    "\4\31\2\0\12\31\20\0\4\31\1\0\10\31\1\0"+
    "\3\31\1\0\27\31\1\0\12\31\1\0\5\31\2\0"+
    "\1\32\10\31\1\0\3\31\1\0\3\31\1\32\7\0"+
    "\2\31\7\0\1\31\1\0\4\31\2\0\12\31\1\0"+
    "\2\31\15\0\4\31\1\0\10\31\1\0\3\31\1\0"+
    "\51\31\2\32\10\31\1\0\3\31\1\0\3\31\1\32"+
    "\1\31\5\0\4\31\7\0\5\31\2\0\12\31\12\0"+
    "\6\31\2\0\2\31\1\0\22\31\3\0\30\31\1\0"+
    "\11\31\1\0\1\31\2\0\7\31\3\0\1\32\4\0"+
    "\6\31\1\0\1\31\1\0\10\31\6\0\12\31\2\0"+
    "\2\31\15\0\72\31\5\0\7\31\6\32\1\31\1\32"+
    "\1\0\12\31\47\0\2\31\1\0\1\31\1\0\5\31"+
    "\1\0\30\31\1\0\1\31\1\0\23\31\1\32\3\31"+
    "\2\0\5\31\1\0\1\31\1\0\5\32\1\31\2\0"+
    "\12\31\2\0\4\31\40\0\1\31\27\0\2\32\6\0"+
    "\12\31\13\0\1\32\1\0\1\32\1\0\1\32\4\0"+
    "\2\32\10\31\1\0\44\31\4\0\21\31\3\32\1\0"+
    "\2\32\20\31\1\0\44\31\11\0\1\32\71\0\67\31"+
    "\1\32\1\31\2\32\17\31\6\0\116\31\2\0\46\31"+
    "\1\0\1\31\5\0\1\31\2\0\53\31\1\0\115\31"+
    "\1\0\4\31\2\0\7\31\1\0\1\31\1\0\4\31"+
    "\2\0\51\31\1\0\4\31\2\0\41\31\1\0\4\31"+
    "\2\0\7\31\1\0\1\31\1\0\4\31\2\0\17\31"+
    "\1\0\71\31\1\0\4\31\2\0\103\31\2\0\3\32"+
    "\40\0\20\31\20\0\126\31\2\0\6\31\3\0\u016c\31"+
    "\2\0\21\31\1\33\32\31\5\0\113\31\3\0\13\31"+
    "\7\0\15\31\1\0\6\31\1\32\13\0\24\31\1\32"+
    "\13\0\24\31\14\0\15\31\1\0\3\31\1\0\2\31"+
    "\14\0\64\31\2\32\23\31\13\32\3\0\1\31\4\0"+
    "\1\31\1\32\2\0\12\31\41\0\3\32\2\0\12\31"+
    "\6\0\131\31\7\0\53\31\5\0\106\31\12\0\37\31"+
    "\1\0\14\31\4\0\11\31\3\32\12\0\50\31\2\0"+
    "\5\31\13\0\54\31\4\0\32\31\6\0\12\31\46\0"+
    "\34\31\4\0\77\31\1\0\1\32\24\31\10\32\2\0"+
    "\1\32\12\31\6\0\12\31\15\0\1\31\10\0\17\32"+
    "\101\0\64\31\1\32\17\31\1\32\7\31\4\0\12\31"+
    "\21\0\11\32\14\0\52\31\2\32\72\31\1\32\13\31"+
    "\2\32\14\0\67\31\1\32\10\0\12\31\3\0\61\31"+
    "\2\0\11\31\7\0\53\31\2\0\3\31\20\0\3\32"+
    "\1\0\25\32\4\31\1\32\6\31\1\32\2\31\3\32"+
    "\1\31\5\0\300\31\47\32\16\31\5\32\1\0\5\32"+
    "\26\31\2\0\6\31\2\0\46\31\2\0\6\31\2\0"+
    "\10\31\1\0\1\31\1\0\1\31\1\0\1\31\1\0"+
    "\37\31\2\0\65\31\1\0\7\31\1\0\1\31\3\0"+
    "\3\31\1\0\7\31\3\0\4\31\2\0\6\31\4\0"+
    "\15\31\5\0\3\31\1\0\7\31\3\0\13\33\35\0"+
    "\2\34\5\0\1\33\17\0\2\32\23\0\1\32\12\0"+
    "\1\33\21\0\1\31\15\0\1\31\20\0\15\31\63\0"+
    "\41\32\21\0\1\31\4\0\1\31\2\0\12\31\1\0"+
    "\1\31\3\0\5\31\6\0\1\31\1\0\1\31\1\0"+
    "\1\31\1\0\4\31\1\0\13\31\2\0\4\31\5\0"+
    "\5\31\4\0\1\31\21\0\51\31\u022d\0\64\31\26\0"+
    "\57\31\1\0\57\31\1\0\205\31\6\0\4\31\3\32"+
    "\2\31\14\0\46\31\1\0\1\31\5\0\1\31\2\0"+
    "\70\31\7\0\1\31\17\0\1\32\27\31\11\0\7\31"+
    "\1\0\7\31\1\0\7\31\1\0\7\31\1\0\7\31"+
    "\1\0\7\31\1\0\7\31\1\0\7\31\1\0\40\31"+
    "\57\0\1\31\320\0\1\33\4\0\3\31\31\0\11\31"+
    "\6\32\1\0\5\31\2\0\5\31\4\0\126\31\2\0"+
    "\2\32\2\0\3\31\1\0\132\31\1\0\4\31\5\0"+
    "\53\31\1\0\136\31\21\0\33\31\65\0\306\31\112\0"+
    "\360\31\20\0\215\31\103\0\56\31\2\0\15\31\3\0"+
    "\34\31\24\0\57\31\4\32\1\0\10\31\2\32\1\0"+
    "\161\31\2\32\45\0\11\31\2\0\147\31\2\0\65\31"+
    "\2\0\5\31\60\0\17\31\1\32\41\31\30\0\64\31"+
    "\14\0\104\31\1\32\1\31\12\0\12\31\6\0\22\32"+
    "\6\31\3\0\1\31\1\0\56\31\3\32\2\0\43\31"+
    "\1\32\14\0\35\31\3\0\63\31\1\32\14\31\1\32"+
    "\16\0\13\31\6\0\37\31\1\0\67\31\11\0\16\31"+
    "\2\0\12\31\6\0\27\31\3\0\105\31\1\32\1\31"+
    "\1\32\1\31\30\0\3\31\2\0\20\31\2\0\4\31"+
    "\1\32\12\0\6\31\2\0\6\31\2\0\6\31\11\0"+
    "\7\31\1\0\7\31\1\0\53\31\1\0\14\31\10\0"+
    "\173\31\1\0\2\32\2\0\12\31\6\0\244\31\14\0"+
    "\27\31\4\0\61\31\4\0\u0100\35\156\31\2\0\152\31"+
    "\46\0\7\31\14\0\5\31\5\0\14\31\1\0\15\31"+
    "\1\0\5\31\1\0\1\31\1\0\2\31\1\0\2\31"+
    "\1\0\154\31\41\0\153\31\22\0\100\31\2\0\66\31"+
    "\50\0\14\31\4\0\20\32\20\0\20\32\3\0\2\32"+
    "\30\0\3\32\40\0\5\31\1\0\207\31\23\0\12\31"+
    "\7\0\32\31\4\0\1\32\1\0\32\31\13\0\131\31"+
    "\3\0\6\31\2\0\6\31\2\0\6\31\2\0\3\31"+
    "\43\0\14\31\1\0\32\31\1\0\23\31\1\0\2\31"+
    "\1\0\17\31\2\0\16\31\42\0\173\31\105\0\65\31"+
    "\210\0\1\32\202\0\35\31\3\0\61\31\17\0\1\32"+
    "\37\0\40\31\15\0\36\31\5\0\53\31\5\0\36\31"+
    "\2\0\44\31\4\0\10\31\1\0\5\31\52\0\236\31"+
    "\2\0\12\31\6\0\44\31\4\0\44\31\4\0\50\31"+
    "\10\0\64\31\234\0\67\31\11\0\26\31\12\0\10\31"+
    "\230\0\6\31\2\0\1\31\1\0\54\31\1\0\2\31"+
    "\3\0\1\31\2\0\27\31\12\0\27\31\11\0\37\31"+
    "\101\0\23\31\1\0\2\31\12\0\26\31\12\0\32\31"+
    "\106\0\70\31\6\0\2\31\100\0\4\31\1\0\2\31"+
    "\5\0\10\31\1\0\3\31\1\0\35\31\2\0\3\32"+
    "\4\0\1\32\40\0\35\31\3\0\35\31\43\0\10\31"+
    "\1\0\34\31\2\32\31\0\66\31\12\0\26\31\12\0"+
    "\23\31\15\0\22\31\156\0\111\31\67\0\63\31\15\0"+
    "\63\31\15\0\50\31\10\0\12\31\306\0\35\31\12\0"+
    "\1\31\10\0\26\31\13\32\217\0\27\31\11\0\106\31"+
    "\1\32\37\0\12\31\17\0\3\32\67\31\2\32\25\0"+
    "\31\31\7\0\12\31\6\0\63\31\2\32\1\0\12\31"+
    "\4\0\3\31\11\0\43\31\1\32\2\0\1\31\11\0"+
    "\100\31\1\32\4\31\4\0\4\32\3\0\13\31\1\0"+
    "\1\31\43\0\22\31\1\0\42\31\2\32\1\31\6\0"+
    "\1\31\101\0\7\31\1\0\1\31\1\0\4\31\1\0"+
    "\17\31\1\0\12\31\7\0\71\31\2\32\5\0\12\31"+
    "\6\0\4\31\1\0\10\31\2\0\2\31\2\0\26\31"+
    "\1\0\7\31\1\0\2\31\1\0\5\31\1\0\2\32"+
    "\10\31\2\0\2\31\2\0\2\31\1\32\2\0\1\31"+
    "\6\0\1\31\5\0\7\31\2\0\7\32\3\0\5\32"+
    "\213\0\102\31\1\32\3\31\1\32\4\31\5\0\12\31"+
    "\4\0\1\32\1\31\40\0\102\31\2\32\2\31\1\0"+
    "\1\31\10\0\12\31\246\0\66\31\2\0\7\31\2\32"+
    "\27\0\6\31\42\0\77\31\1\32\1\31\3\0\1\31"+
    "\13\0\12\31\46\0\66\31\2\32\1\31\7\0\12\31"+
    "\66\0\33\31\2\0\16\31\1\32\4\0\12\31\306\0"+
    "\71\31\2\32\145\0\112\31\25\0\1\31\240\0\10\31"+
    "\2\0\56\31\2\0\6\31\1\32\1\31\1\0\2\31"+
    "\33\0\63\31\2\32\12\31\10\0\1\32\10\0\110\31"+
    "\2\32\3\0\1\31\42\0\71\31\7\0\11\31\1\0"+
    "\55\31\1\0\7\31\1\32\1\31\17\0\12\31\30\0"+
    "\36\31\2\0\26\31\1\0\16\31\111\0\7\31\1\0"+
    "\2\31\1\0\54\31\3\0\1\31\1\0\2\31\1\0"+
    "\3\31\1\32\1\31\2\32\2\31\10\0\12\31\6\0"+
    "\6\31\1\0\2\31\1\0\45\31\1\0\2\31\1\0"+
    "\4\31\1\32\1\31\7\0\12\31\u0136\0\27\31\11\0"+
    "\232\31\146\0\157\31\21\0\304\31\274\0\57\31\321\0"+
    "\107\31\271\0\71\31\7\0\37\31\1\0\12\31\146\0"+
    "\36\31\2\0\5\32\13\0\60\31\7\32\11\0\4\31"+
    "\14\0\12\31\11\0\25\31\5\0\23\31\260\0\100\31"+
    "\200\0\113\31\4\0\71\31\7\0\21\31\100\0\2\31"+
    "\1\0\1\31\34\0\370\31\10\0\363\31\15\0\37\31"+
    "\61\0\3\31\21\0\4\31\10\0\u018c\31\4\0\153\31"+
    "\5\0\15\31\3\0\11\31\7\0\12\31\3\0\1\32"+
    "\1\31\306\0\5\32\3\0\6\32\10\0\10\32\2\0"+
    "\7\32\36\0\4\32\224\0\3\32\273\0\125\31\1\0"+
    "\107\31\1\0\2\31\2\0\1\31\2\0\2\31\2\0"+
    "\4\31\1\0\14\31\1\0\1\31\1\0\7\31\1\0"+
    "\101\31\1\0\4\31\2\0\10\31\1\0\7\31\1\0"+
    "\34\31\1\0\4\31\1\0\5\31\1\0\1\31\3\0"+
    "\7\31\1\0\u0154\31\2\0\31\31\1\0\31\31\1\0"+
    "\37\31\1\0\31\31\1\0\37\31\1\0\31\31\1\0"+
    "\37\31\1\0\31\31\1\0\37\31\1\0\31\31\1\0"+
    "\10\31\2\0\62\31\67\32\4\0\62\32\10\0\1\32"+
    "\16\0\1\32\26\0\5\32\1\0\17\32\120\0\7\31"+
    "\1\0\21\31\2\0\7\31\1\0\2\31\1\0\5\31"+
    "\325\0\55\31\3\0\7\32\7\31\2\0\12\31\4\0"+
    "\1\31\u0171\0\54\31\4\32\12\31\6\0\305\31\13\0"+
    "\7\32\51\0\104\31\3\32\1\31\3\32\1\31\4\0"+
    "\12\31\246\0\4\31\1\0\33\31\1\0\2\31\1\0"+
    "\1\31\2\0\1\31\1\0\12\31\1\0\4\31\1\0"+
    "\1\31\1\0\1\31\6\0\1\31\4\0\1\31\1\0"+
    "\1\31\1\0\1\31\1\0\3\31\1\0\2\31\1\0"+
    "\1\31\2\0\1\31\1\0\1\31\1\0\1\31\1\0"+
    "\1\31\1\0\1\31\1\0\2\31\1\0\1\31\2\0"+
    "\4\31\1\0\7\31\1\0\4\31\1\0\4\31\1\0"+
    "\1\31\1\0\12\31\1\0\21\31\5\0\3\31\1\0"+
    "\5\31\1\0\21\31\164\0\32\31\6\0\32\31\6\0"+
    "\32\31\166\0\327\31\51\0\65\31\13\0\336\31\2\0"+
    "\u0182\31\16\0\u0131\31\37\0\36\31\342\0\360\32\20\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29952];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\0\1\2\2\0\1\3\1\4\1\5"+
    "\1\6\1\7\1\10\1\5\1\11\1\5\1\10\1\12"+
    "\2\10\1\13\1\10\1\1\1\14\1\10\2\1\2\10"+
    "\1\15\1\16\1\10\1\17\1\11\1\10\1\2\1\20"+
    "\1\10\1\21\1\10\2\22\1\23\1\24\1\3\1\10"+
    "\1\4\1\11\1\10\2\0\2\11\1\0\5\11\1\25"+
    "\1\0\1\11\1\26\2\0\2\22\2\0\1\11\1\0"+
    "\1\27\1\11\1\0\2\11\1\30\2\31\1\11\1\0"+
    "\1\11\1\0\1\30\2\0\1\31\2\30\1\11\1\0"+
    "\2\32\14\0\1\33\2\0\1\5\2\0\1\27";

  private static int [] zzUnpackAction() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\36\0\74\0\132\0\170\0\226\0\264\0\322"+
    "\0\360\0\u010e\0\u012c\0\u014a\0\u0168\0\u0186\0\u01a4\0\u01c2"+
    "\0\u01e0\0\u0168\0\u0168\0\u01fe\0\u021c\0\u021c\0\u023a\0\u0258"+
    "\0\u0168\0\u0276\0\u0294\0\u02b2\0\u02d0\0\u02ee\0\u030c\0\u0168"+
    "\0\u032a\0\u014a\0\u0348\0\u0366\0\u0384\0\u0168\0\u03a2\0\u0168"+
    "\0\u03c0\0\u03de\0\u03fc\0\u0168\0\u041a\0\u0438\0\u0456\0\u0474"+
    "\0\u0492\0\u04b0\0\u04ce\0\u04ec\0\u050a\0\u0528\0\u0546\0\u0564"+
    "\0\u0582\0\u05a0\0\u05be\0\u05dc\0\u0168\0\u02d0\0\u05fa\0\u0168"+
    "\0\u0618\0\u0636\0\u0654\0\u0672\0\u0456\0\u04b0\0\u0690\0\u06ae"+
    "\0\u06cc\0\u06ea\0\u06ea\0\u0708\0\u0726\0\u0744\0\u05be\0\u06ea"+
    "\0\u0762\0\u0780\0\u079e\0\u07bc\0\u07da\0\u07f8\0\u0816\0\u0726"+
    "\0\u0834\0\u0852\0\u0870\0\u0870\0\u079e\0\u0870\0\u088e\0\u08ac"+
    "\0\u08ca\0\u08e8\0\u0906\0\u0924\0\u0942\0\u0960\0\u097e\0\u099c"+
    "\0\u09ba\0\u09d8\0\u0168\0\u09f6\0\u0a14\0\u0168\0\u0a32\0\u0a50"+
    "\0\u0168";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\1\14\1\15\1\14\1\16\1\14\1\17\1\13"+
    "\1\20\3\17\1\21\1\17\2\13\3\17\6\13\1\17"+
    "\4\13\1\22\1\14\1\23\1\14\1\24\1\14\3\22"+
    "\1\25\2\26\1\22\1\26\2\22\4\26\2\22\1\27"+
    "\2\22\2\26\3\22\1\30\1\14\1\31\1\14\1\32"+
    "\1\14\2\30\1\33\3\30\1\34\7\30\1\35\1\36"+
    "\3\22\2\30\2\22\2\30\1\14\1\31\1\14\1\32"+
    "\1\14\2\30\1\33\3\30\1\34\2\30\1\37\4\30"+
    "\1\35\1\36\3\22\2\30\2\22\1\30\1\22\1\14"+
    "\1\40\1\14\1\41\1\42\2\22\1\43\3\22\1\44"+
    "\10\22\1\36\10\22\1\45\1\22\1\40\1\22\1\41"+
    "\1\46\17\45\1\36\3\22\2\45\2\22\1\45\1\22"+
    "\1\14\1\40\1\14\1\41\1\14\2\22\1\43\3\22"+
    "\1\44\3\22\1\47\4\22\1\36\11\22\1\14\1\50"+
    "\1\14\1\51\1\14\1\52\1\22\1\53\3\52\1\44"+
    "\1\52\1\54\1\22\3\52\2\22\1\36\3\22\1\52"+
    "\5\22\1\55\1\40\1\14\1\41\1\55\2\56\1\43"+
    "\3\56\1\44\7\56\1\57\1\36\1\22\2\56\5\22"+
    "\10\60\1\61\3\60\1\44\7\60\1\62\1\36\1\22"+
    "\7\60\1\13\4\0\1\63\30\13\1\0\1\14\1\0"+
    "\1\14\1\0\1\14\70\0\1\15\33\0\1\13\4\0"+
    "\1\64\1\17\1\13\4\17\1\13\1\17\2\13\3\17"+
    "\6\13\1\17\4\13\1\65\1\66\3\67\1\70\1\71"+
    "\1\65\1\72\3\71\1\65\1\71\1\65\1\73\3\71"+
    "\4\65\1\13\1\65\1\71\2\65\3\13\4\0\1\63"+
    "\6\13\1\74\21\13\2\0\1\23\45\0\2\26\1\0"+
    "\1\26\2\0\4\26\5\0\2\26\31\0\1\75\7\0"+
    "\1\30\5\0\16\30\1\76\4\0\2\30\2\0\1\30"+
    "\2\0\1\31\33\0\1\33\1\43\3\0\1\43\16\33"+
    "\1\77\2\43\1\0\1\43\2\33\1\43\1\0\2\30"+
    "\5\0\6\30\1\33\7\30\1\76\4\0\2\30\2\0"+
    "\1\30\24\0\3\30\34\0\1\100\10\0\1\37\5\0"+
    "\16\37\1\101\4\0\2\37\2\0\1\37\2\0\1\40"+
    "\33\0\2\43\3\0\22\43\1\0\4\43\16\0\1\43"+
    "\21\0\1\45\5\0\17\45\4\0\2\45\2\0\1\45"+
    "\22\0\1\102\15\0\1\50\41\0\1\52\1\0\4\52"+
    "\1\0\1\52\2\0\3\52\6\0\1\52\4\0\2\43"+
    "\3\0\1\43\1\103\1\43\1\104\3\103\1\43\1\103"+
    "\2\43\3\103\4\43\1\0\1\43\1\103\2\43\3\0"+
    "\1\55\1\0\1\14\1\0\1\55\36\0\2\56\1\0"+
    "\3\56\1\0\7\56\1\105\2\0\2\56\15\0\1\56"+
    "\3\0\1\56\7\0\3\56\7\0\10\60\1\0\3\60"+
    "\1\0\7\60\1\106\2\0\7\60\2\43\3\0\3\43"+
    "\1\107\16\43\1\0\4\43\12\0\1\60\3\0\1\60"+
    "\7\0\3\60\27\0\1\110\15\0\1\111\5\0\30\111"+
    "\1\65\1\43\3\0\1\43\21\65\1\13\4\65\2\13"+
    "\1\43\1\66\3\67\1\66\11\43\1\112\7\43\1\0"+
    "\4\43\3\0\5\67\11\0\1\113\16\0\1\114\1\66"+
    "\3\67\1\66\11\114\1\115\7\114\1\111\4\114\2\111"+
    "\1\65\1\43\3\0\1\114\1\71\1\65\4\71\1\65"+
    "\1\71\2\65\3\71\4\65\1\13\1\65\1\71\2\65"+
    "\2\13\1\65\1\43\3\0\1\114\1\71\1\65\1\116"+
    "\3\71\1\65\1\71\2\65\3\71\4\65\1\13\1\65"+
    "\1\71\2\65\2\13\1\117\1\120\3\0\1\120\21\117"+
    "\1\13\4\117\2\13\1\65\1\121\3\122\1\121\11\65"+
    "\1\123\7\65\1\13\4\65\2\13\2\43\3\0\17\43"+
    "\3\33\1\0\4\43\26\0\3\37\31\0\1\124\13\0"+
    "\2\43\3\0\1\43\1\103\1\43\4\103\1\43\1\103"+
    "\2\43\3\103\4\43\1\0\1\43\1\103\2\43\2\0"+
    "\2\43\3\0\1\43\1\103\1\43\1\125\3\103\1\43"+
    "\1\103\2\43\3\103\4\43\1\0\1\43\1\103\2\43"+
    "\2\0\2\43\3\0\3\43\1\125\16\43\1\0\4\43"+
    "\24\0\1\126\13\0\1\111\4\0\1\127\30\111\2\120"+
    "\3\0\22\120\1\0\4\120\2\0\1\114\1\43\3\0"+
    "\1\43\21\114\1\111\4\114\2\111\1\130\1\120\3\0"+
    "\1\120\21\130\1\111\4\130\2\111\1\131\1\125\3\0"+
    "\1\132\1\116\1\131\4\116\1\131\1\116\2\131\3\116"+
    "\4\131\1\13\1\131\1\116\2\131\2\13\1\43\1\121"+
    "\3\122\1\121\11\43\1\133\7\43\1\0\4\43\3\0"+
    "\5\122\11\0\1\134\16\0\1\135\1\136\3\0\1\136"+
    "\21\135\1\13\4\135\2\13\21\0\1\137\14\0\2\125"+
    "\3\0\22\125\1\0\4\125\24\0\1\140\33\0\1\141"+
    "\15\0\1\131\1\125\3\0\1\125\21\131\1\13\4\131"+
    "\2\13\1\132\1\125\3\0\1\125\21\132\1\111\4\132"+
    "\2\111\2\136\3\0\22\136\1\0\4\136\16\0\1\142"+
    "\42\0\1\143\36\0\1\144\30\0\1\145\34\0\1\146"+
    "\43\0\1\147\26\0\1\150\37\0\1\151\41\0\1\152"+
    "\31\0\1\153\33\0\1\154\36\0\1\155\36\0\1\156"+
    "\35\0\1\157\33\0\1\160\37\0\1\161\20\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[2670];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\1\1\0\1\1\2\0\4\1\1\11\4\1"+
    "\2\11\5\1\1\11\6\1\1\11\5\1\1\11\1\1"+
    "\1\11\3\1\1\11\6\1\2\0\2\1\1\0\5\1"+
    "\1\11\1\0\1\1\1\11\2\0\2\1\2\0\1\1"+
    "\1\0\2\1\1\0\6\1\1\0\1\1\1\0\1\1"+
    "\2\0\4\1\1\0\2\1\14\0\1\11\2\0\1\11"+
    "\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _HttpLexer() {
    this((java.io.Reader)null);
  }

  private int zzSavedState = YYINITIAL;

  public final void yysavestate() {
    zzSavedState = zzLexicalState;
  }

  public final void yyloadstate() {
    zzLexicalState = zzSavedState;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _HttpLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return META_TOKEN;
            }
          // fall through
          case 28: break;
          case 2:
            { return REQUEST_TARGET_VALUE;
            }
          // fall through
          case 29: break;
          case 3:
            { return FIELD_CONTENT_TOKEN;
            }
          // fall through
          case 30: break;
          case 4:
            { return REQUEST_BODY_VALUE;
            }
          // fall through
          case 31: break;
          case 5:
            { yybegin(REQUEST_TARGET_STATE);

          String yyText = yytext().toString();

          if (yyText.indexOf("{{") == 0) {
              yypushback(yylength() - 2);
              yysavestate();
              yybegin(VARIABLE_STATE);
              return LBRACES;
          }

          int cutPlace = yylength();

          int tmpPlace = yyText.indexOf(" ");
          if (tmpPlace >= 0)
              cutPlace = tmpPlace;

          tmpPlace = yyText.indexOf("{");
          if (tmpPlace == 0) {
              yypushback(yylength() - 1);
              return BAD_CHARACTER;
          } else if (tmpPlace > 0)
              cutPlace = Integer.min(cutPlace, tmpPlace);

          tmpPlace = yyText.indexOf("}");
          if (tmpPlace == 0) {
              yypushback(yylength() - 1);
              return BAD_CHARACTER;
          } else if (tmpPlace > 0)
              cutPlace = Integer.min(cutPlace, tmpPlace);

          if (cutPlace > 0 && cutPlace < yylength())
              yypushback(yylength() - cutPlace);
          return REQUEST_TARGET_VALUE;
            }
          // fall through
          case 32: break;
          case 6:
            { return WHITE_SPACE;
            }
          // fall through
          case 33: break;
          case 7:
            { return CRLF;
            }
          // fall through
          case 34: break;
          case 8:
            { return BAD_CHARACTER;
            }
          // fall through
          case 35: break;
          case 9:
            { return COMMENT_LINE;
            }
          // fall through
          case 36: break;
          case 10:
            { yypushback(yylength()); yyloadstate(); break;
            }
          // fall through
          case 37: break;
          case 11:
            { return IDENTIFIER;
            }
          // fall through
          case 38: break;
          case 12:
            { yybegin(YYINITIAL); return CRLF;
            }
          // fall through
          case 39: break;
          case 13:
            { return TAG_TOKEN;
            }
          // fall through
          case 40: break;
          case 14:
            { yybegin(FIELD_NAME_STATE); return CRLF;
            }
          // fall through
          case 41: break;
          case 15:
            { yybegin(REQUEST_TARGET_STATE); return SP;
            }
          // fall through
          case 42: break;
          case 16:
            { yybegin(HTTP_VERSION_STATE); return SP;
            }
          // fall through
          case 43: break;
          case 17:
            { yybegin(MESSAGE_BODY_STATE); return CRLF;
            }
          // fall through
          case 44: break;
          case 18:
            { return HTTP_TOKEN;
            }
          // fall through
          case 45: break;
          case 19:
            { yybegin(FIELD_VALUE_STATE); return COLON;
            }
          // fall through
          case 46: break;
          case 20:
            { return OWS;
            }
          // fall through
          case 47: break;
          case 21:
            { yyloadstate(); return RBRACES;
            }
          // fall through
          case 48: break;
          case 22:
            { yysavestate(); yybegin(VARIABLE_STATE); return LBRACES;
            }
          // fall through
          case 49: break;
          case 23:
            { yypushback(yylength() - yytext().toString().indexOf(" "));
          yybegin(PRE_REQUEST_TARGET_STATE);
          return HTTP_TOKEN;
            }
          // fall through
          case 50: break;
          case 24:
            { yypushback(yylength() - 3); yybegin(REQUEST_NAME_STATE); return REQUEST_SEPARATOR;
            }
          // fall through
          case 51: break;
          case 25:
            { yypushback(yylength() - 1); yybegin(TAG_COMMENT_STATE); return COMMENT_SEPARATOR;
            }
          // fall through
          case 52: break;
          case 26:
            { yypushback(yylength() - 2); yybegin(TAG_COMMENT_STATE); return COMMENT_SEPARATOR;
            }
          // fall through
          case 53: break;
          case 27:
            { return HTTP_VERSION;
            }
          // fall through
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
